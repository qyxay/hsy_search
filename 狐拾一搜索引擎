<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>狐拾一搜索引擎</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <script>
        tailwind.config = { theme: { extend: {
            colors: {
                primary: '#5B6BF9',
                level: {1: '#4285F4', 2: '#34A853', 3: '#FBBC05', 4: '#EA4335', 5: '#9C27B0'},
                category: '#8B5CF6',
                match: {name: '#FF9F1C', content: '#3A86FF'},
                neutral: {50: '#F9FAFB', 100: '#F3F4F6', 200: '#E5E7EB', 300: '#D1D5DB', 600: '#4B5563', 700: '#374151', 800: '#1F2937'}
            },
            fontFamily: {inter: ['Inter', 'system-ui', 'sans-serif']},
            boxShadow: {'card': '0 2px 8px rgba(0,0,0,0.08)', 'card-hover': '0 4px 16px rgba(0,0,0,0.12)'},
            spacing: {'15': '3.75rem', '20': '5rem', '25': '6.25rem'}
        }}}
    </script>
    <style type="text/tailwindcss">
        @layer utilities {
            .result-card { @apply bg-white rounded-xl p-5 shadow-card hover:shadow-card-hover transition-all duration-300 border border-neutral-100 cursor-pointer; }
            .fade-in { animation: fadeIn 0.2s cubic-bezier(0.25,0.46,0.45,0.94); }
            @keyframes fadeIn { from { opacity: 0; transform: translateY(4px); } to { opacity: 1; transform: translateY(0); } }
            .searching { @apply opacity-80 cursor-not-allowed bg-neutral-100 text-neutral-500 border-neutral-200; }
            .level-badge { @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-[11px] font-medium text-white; }
            .category-badge { @apply inline-flex items-center px-1.5 py-0.5 rounded text-sm font-medium bg-category/10 text-category; }
            .match-badge { @apply inline-flex items-center px-1.5 py-0.5 rounded text-sm font-medium; }
            .match-name { @apply bg-match-name/10 text-match-name; }
            .match-content { @apply bg-match-content/10 text-match-content; }
            .level-indent-1 { @apply pl-5; }
            .level-indent-2 { @apply pl-10; }
            .level-indent-3 { @apply pl-15; }
            .level-indent-4 { @apply pl-20; }
            .level-indent-5 { @apply pl-25; }
            .expandable-content { @apply mt-3 overflow-hidden transition-all duration-200 max-h-0; }
            .expandable-content.show { @apply max-h-[2000px]; }
            .card-header { @apply flex items-center justify-between py-1 rounded-md transition-colors duration-200; }
            .card-title { @apply flex items-center gap-2 flex-wrap; }
            .level-icon { @apply text-neutral-400 transition-all duration-200 w-4 h-4 flex items-center justify-center; }
            .content-text { @apply text-neutral-600 text-sm leading-relaxed; }
            .level-text-1 { @apply text-lg font-semibold text-neutral-800; }
            .level-text-2 { @apply text-base font-medium text-neutral-800; }
            .level-text-3 { @apply text-base font-semibold text-neutral-700; }
            .level-text-4 { @apply text-sm font-normal text-neutral-700; }
            .level-text-5 { @apply text-sm font-light text-neutral-600; }
            .match-highlight { @apply bg-yellow-100 text-neutral-800 px-0.5 rounded; }
        }
    </style>
</head>
<body class="bg-neutral-50 min-h-screen font-inter text-neutral-700">
    <div class="container mx-auto px-4 py-6 md:py-10 max-w-4xl">
        <h1 class="text-[clamp(1.5rem,3vw,2rem)] font-semibold text-center mb-6 md:mb-8 text-neutral-800">
            狐拾一搜索引擎
            <span class="block text-[0.8em] font-normal text-neutral-500 mt-1">层级化知识库检索工具</span>
        </h1>
        
        <div class="mb-5 md:mb-7 flex flex-col sm:flex-row gap-2">
            <div class="flex-grow relative">
                <input type="text" id="searchInput" placeholder="输入关键词搜索..." 
                       class="w-full px-4 py-2.5 rounded-lg border border-neutral-200 focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary/30 transition-all">
                <button id="clearBtn" class="absolute right-3 top-1/2 -translate-y-1/2 text-neutral-400 hover:text-neutral-600 hidden">
                    <i class="fa fa-times"></i>
                </button>
            </div>
            <button id="searchBtn" class="bg-primary text-white px-4 md:px-5 py-2.5 rounded-lg hover:bg-primary/90 transition-all flex items-center justify-center gap-1.5 whitespace-nowrap">
                <i class="fa fa-search"></i><span>搜索</span>
            </button>
        </div>
        
        <div id="status" class="mb-5 md:mb-7 p-3 rounded-lg bg-blue-50 text-blue-700 flex items-center gap-2">
            <i class="fa fa-spinner fa-spin"></i><span>正在加载数据源</span>
        </div>
        
        <div id="searchResults" class="hidden fade-in">
            <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 gap-2">
                <h2 class="text-lg font-medium text-neutral-700">
                    找到 <span id="resultCount" class="text-primary font-semibold">0</span> 条相关结果
                </h2>
                <div class="flex items-center gap-3">
                    <span id="resultTip" class="text-sm text-neutral-500 hidden">点击任意区域展开/折叠内容</span> <!-- 隐藏展开提示 -->
                    <span id="matchTip" class="text-sm text-neutral-500 hidden">
                        <i class="fa fa-star text-yellow-400 mr-1"></i>匹配度从高到低排序
                    </span>
                </div>
            </div>
            <div id="resultsList" class="space-y-3 md:space-y-4"></div>
        </div>
        
        <div id="noResult" class="hidden py-10 md:py-12 bg-white rounded-xl shadow-sm border border-neutral-100 text-center">
            <div class="inline-flex items-center justify-center w-12 md:w-16 h-12 md:h-16 rounded-full bg-neutral-50 text-neutral-300 mb-3 md:mb-4">
                <i class="fa fa-search text-xl"></i>
            </div>
            <p class="text-neutral-600 mb-2">未找到相关结果</p>
            <p class="text-xs text-neutral-400">建议：1.简化关键词 2.尝试同义词 3.扩大搜索范围</p>
        </div>
        
        <div id="errorMessage" class="hidden p-3 md:p-3.5 mb-5 md:mb-7 bg-red-50 text-red-600 rounded-lg flex items-center gap-2 animate-fadeIn">
            <i class="fa fa-exclamation-circle"></i><span id="errorText"></span>
        </div>
    </div>

    <script>
        const CONFIG = {
            dataUrl: 'https://qyxay.github.io/hsy_search_json/%E8%B5%84%E6%96%99%E5%BA%93.json',
            excludedPath: ['person'],
            maxDisplayLevel: 5,
            fetchTimeout: 10000,
            maxResultAnimationDelay: 500,
            contentMaxLength: 150
        };

        const STATE = { data: null, isSearching: false, lastQuery: '' };

        const DOM = {
            searchInput: document.getElementById('searchInput'),
            searchBtn: document.getElementById('searchBtn'),
            clearBtn: document.getElementById('clearBtn'),
            status: document.getElementById('status'),
            resultsContainer: document.getElementById('searchResults'),
            resultsList: document.getElementById('resultsList'),
            resultCount: document.getElementById('resultCount'),
            matchTip: document.getElementById('matchTip'),
            noResult: document.getElementById('noResult'),
            errorMessage: document.getElementById('errorMessage'),
            errorText: document.getElementById('errorText')
        };

        function showError(message, duration = 5000) {
            DOM.errorText.textContent = message;
            DOM.errorMessage.classList.remove('hidden');
            setTimeout(() => DOM.errorMessage.classList.add('hidden'), duration);
        }

        function isExcludedPath(path) {
            if (path.length < CONFIG.excludedPath.length) return false;
            for (let i = 0; i < CONFIG.excludedPath.length; i++)
                if (path[i] !== CONFIG.excludedPath[i]) return false;
            return true;
        }

        function escapeRegExp(str) { return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); }

        function highlightMatch(text, query) {
            if (!query || typeof text !== 'string') return text;
            const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
            return text.replace(regex, '<span class="match-highlight">$1</span>');
        }

        // 彻底移除展开提示文本
        function formatContent(value, query) {
            try {
                if (value === null) return ''; // 不显示null提示
                if (value === undefined) return ''; // 不显示undefined提示
                
                if (typeof value !== 'object') {
                    const text = String(value);
                    const highlighted = highlightMatch(text, query);
                    // 控制内容长度，过长则省略
                    return text.length > CONFIG.contentMaxLength 
                        ? `${highlighted.substring(0, CONFIG.contentMaxLength)}...` 
                        : highlighted;
                }
                return ''; // 对象类型不显示任何提示
            } catch (err) {
                return ''; // 出错时也不显示提示
            }
        }

        async function loadData() {
            try {
                updateStatus('加载中', '正在连接数据源...', 'blue');
                
                const controller = new AbortController();
                const timeoutId = setTimeout(() => {
                    controller.abort();
                    throw new Error('数据加载超时，请检查网络或稍后重试');
                }, CONFIG.fetchTimeout);

                let remoteData = {};
                try {
                    const response = await fetch(CONFIG.dataUrl, { signal: controller.signal });
                    clearTimeout(timeoutId);
                    
                    if (!response.ok) throw new Error(`服务器响应错误 (${response.status}): ${response.statusText}`);
                    else remoteData = await response.json();
                } catch (fetchErr) {
                    throw new Error(`无法加载远程数据源: ${fetchErr.message}`);
                }

                STATE.data = remoteData;
                if (typeof STATE.data !== 'object' || STATE.data === null)
                    throw new Error('数据源必须是对象或数组类型');

                updateStatus('成功', '数据源加载完成，可输入关键词搜索', 'green');
                DOM.searchBtn.disabled = false;
                DOM.searchBtn.classList.remove('searching');

            } catch (err) {
                updateStatus('失败', err.message, 'red');
                DOM.searchBtn.disabled = true;
                DOM.searchBtn.classList.add('searching');
                showError(`数据加载失败：${err.message}`, 8000);
                console.error('数据加载详细错误:', err);
            }
        }

        function updateStatus(type, message, color) {
            const colorMap = {blue: 'bg-blue-50 text-blue-700', green: 'bg-green-50 text-green-700', red: 'bg-red-50 text-red-600'};
            const iconMap = {blue: '<i class="fa fa-spinner fa-spin"></i>', green: '<i class="fa fa-check-circle"></i>', red: '<i class="fa fa-exclamation-circle"></i>'};
            DOM.status.className = `mb-5 md:mb-7 p-3 rounded-lg ${colorMap[color]} flex items-center gap-2`;
            DOM.status.innerHTML = `${iconMap[color]}<span>${message}</span>`;
        }

        function toggleCardExpand(cardEl) {
            const contentEl = cardEl.querySelector('.expandable-content');
            const iconEl = cardEl.querySelector('.level-icon');
            if (!contentEl || !iconEl) return;

            contentEl.classList.toggle('show');
            if (contentEl.classList.contains('show')) {
                iconEl.classList.replace('fa-chevron-right', 'fa-chevron-down');
                iconEl.classList.replace('text-neutral-400', 'text-primary');
            } else {
                iconEl.classList.replace('fa-chevron-down', 'fa-chevron-right');
                iconEl.classList.replace('text-primary', 'text-neutral-400');
            }
        }

        function searchData(obj, query, results, path, level, parentCategory) {
            if (level > CONFIG.maxDisplayLevel || isExcludedPath(path) || obj === null || typeof obj !== 'object') return;

            try {
                let currentParentCategory = parentCategory;
                if (level === 1) currentParentCategory = path[path.length - 1];

                if (level > 1) {
                    const currentName = path[path.length - 1];
                    const nameLower = currentName.toLowerCase();
                    const queryLower = query.toLowerCase();

                    let matchScore = 0, nameMatched = false, contentMatched = false;

                    if (nameLower.includes(queryLower)) {
                        nameMatched = true;
                        matchScore = nameLower === queryLower ? 10 : nameLower.startsWith(queryLower) ? 8 : 5;
                    }

                    if (!nameMatched && typeof obj === 'object') {
                        const contentStr = JSON.stringify(obj).toLowerCase();
                        if (contentStr.includes(queryLower)) {
                            contentMatched = true;
                            matchScore = 3;
                        }
                    }

                    matchScore += (CONFIG.maxDisplayLevel - level + 1) * 0.5;

                    if (nameMatched || contentMatched) {
                        results.push({
                            name: currentName,
                            highlightedName: highlightMatch(currentName, query),
                            content: formatContent(obj, query),
                            level: level,
                            path: path.join(' > '),
                            highlightedPath: path.map(p => highlightMatch(p, query)).join(' > '),
                            fullData: obj,
                            matchScore: matchScore,
                            matchType: nameMatched ? 'name' : 'content',
                            parentCategory: currentParentCategory,
                            highlightedParentCategory: highlightMatch(currentParentCategory, query)
                        });
                    }
                }

                if (Array.isArray(obj)) {
                    obj.forEach((item, index) => {
                        const arrayItemName = `${path.length > 0 ? path[path.length - 1] : 'root'}[${index}]`;
                        searchData(item, query, results, [...path, arrayItemName], level + 1, currentParentCategory);
                    });
                } else if (typeof obj === 'object' && obj !== null) {
                    for (const key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            searchData(obj[key], query, results, [...path, key], level + 1, currentParentCategory);
                        }
                    }
                }
            } catch (err) {
                console.error(`递归搜索错误（路径：${path.join('/')}）:`, err);
            }
        }

        function getLevelIndentClass(relativeLevel) {
            return `level-indent-${Math.min(relativeLevel, 5)}`;
        }

        function isExpandable(value) {
            return value !== null && typeof value === 'object' && (
                (Array.isArray(value) && value.length > 0) ||
                (!Array.isArray(value) && Object.keys(value).length > 0)
            );
        }

        // 可选：如果希望完全隐藏子层级内容，可注释此函数并禁用展开功能
        function generateChildLevels(data, parentLevel, query) {
            const currentLevel = parentLevel + 1;
            if (currentLevel > CONFIG.maxDisplayLevel) {
                return ''; // 不显示层级限制提示
            }

            if (!isExpandable(data)) {
                const highlightedValue = highlightMatch(String(data), query);
                return `<div class="${getLevelIndentClass(1)} content-text">${highlightedValue}</div>`;
            }

            let html = `<div class="border-t border-neutral-100 pt-3 mt-1">`;
            
            if (Array.isArray(data)) {
                data.forEach((item, index) => {
                    const itemName = `[${index}]`;
                    const isItemExpandable = isExpandable(item);
                    const textClass = `level-text-${currentLevel}`;
                    
                    html += `
                        <div class="mb-2 last:mb-0">
                            <div class="flex items-center gap-2 ${getLevelIndentClass(1)} ${textClass}" onclick="toggleNestedExpand(event, this)">
                                ${highlightMatch(itemName, query)}
                                ${isItemExpandable ? '<i class="fa fa-chevron-right text-neutral-400 text-xs transition-transform duration-200"></i>' : ''}
                            </div>
                            ${isItemExpandable 
                                ? `<div class="expandable-content">${generateChildLevels(item, currentLevel, query)}</div>` 
                                : `<div class="${getLevelIndentClass(2)} content-text mt-1">${highlightMatch(String(item), query)}</div>`
                            }
                        </div>
                    `;
                });
            } else {
                const keys = Object.keys(data);
                keys.forEach(key => {
                    const item = data[key];
                    const isItemExpandable = isExpandable(item);
                    const textClass = `level-text-${currentLevel}`;
                    
                    html += `
                        <div class="mb-2 last:mb-0">
                            <div class="flex items-center gap-2 ${getLevelIndentClass(1)} ${textClass}" onclick="toggleNestedExpand(event, this)">
                                ${highlightMatch(key, query)}
                                ${isItemExpandable ? '<i class="fa fa-chevron-right text-neutral-400 text-xs transition-transform duration-200"></i>' : ''}
                            </div>
                            ${isItemExpandable 
                                ? `<div class="expandable-content">${generateChildLevels(item, currentLevel, query)}</div>` 
                                : `<div class="${getLevelIndentClass(2)} content-text mt-1">${highlightMatch(String(item), query)}</div>`
                            }
                        </div>
                    `;
                });
            }
            
            return html + '</div>';
        }

        function toggleNestedExpand(event, el) {
            event.stopPropagation();
            const contentEl = el.nextElementSibling;
            const iconEl = el.querySelector('i.fa-chevron-right, i.fa-chevron-down');
            
            if (contentEl && contentEl.classList.contains('expandable-content') && iconEl) {
                contentEl.classList.toggle('show');
                if (contentEl.classList.contains('show')) {
                    iconEl.classList.replace('fa-chevron-right', 'fa-chevron-down');
                    iconEl.classList.add('text-primary');
                } else {
                    iconEl.classList.replace('fa-chevron-down', 'fa-chevron-right');
                    iconEl.classList.remove('text-primary');
                }
            }
        }

        function showResults(results, query) {
            DOM.resultsList.innerHTML = '';

            if (results.length > 0) {
                results.sort((a, b) => b.matchScore - a.matchScore);
                DOM.resultCount.textContent = results.length;
                DOM.matchTip.classList.remove('hidden');

                results.forEach((item, index) => {
                    const isExpandableCard = isExpandable(item.fullData) && item.level < CONFIG.maxDisplayLevel;
                    const titleClass = `level-text-${item.level}`;
                    const animationDelay = Math.floor(Math.min(index / results.length, 1) * CONFIG.maxResultAnimationDelay);

                    const card = document.createElement('div');
                    card.className = 'result-card fade-in';
                    card.style.animationDelay = `${animationDelay}ms`;

                    // 移除分类标签（如"人物"）、路径显示，仅保留核心信息
                    card.innerHTML = `
                        <div class="card-header">
                            <div class="card-title">
                                <span class="level-badge bg-level-${item.level}">${item.level}层</span>
                                <span class="${titleClass}">${item.highlightedName}</span>
                                ${item.matchType === 'name' ? '<span class="match-badge match-name">标题匹配</span>' : '<span class="match-badge match-content">内容匹配</span>'}
                            </div>
                            ${isExpandableCard ? '<i class="level-icon fa fa-chevron-right"></i>' : '<i class="level-icon opacity-0"></i>'}
                        </div>
                        ${item.content ? `<div class="content-text mb-2">${item.content}</div>` : ''} <!-- 仅在有内容时显示 -->
                        ${isExpandableCard ? `<div class="expandable-content">${generateChildLevels(item.fullData, item.level, query)}</div>` : ''}
                    `;

                    if (isExpandableCard) card.addEventListener('click', () => toggleCardExpand(card));
                    DOM.resultsList.appendChild(card);
                });

                DOM.resultsContainer.classList.remove('hidden');
                DOM.noResult.classList.add('hidden');
            } else {
                DOM.resultsContainer.classList.add('hidden');
                DOM.noResult.classList.remove('hidden');
                DOM.matchTip.classList.add('hidden');
            }
        }

        function executeSearch(query) {
            if (STATE.isSearching) return;
            if (!STATE.data) { showError('数据源尚未加载完成，请稍候'); return; }

            query = query.trim();
            if (!query) {
                DOM.resultsContainer.classList.add('hidden');
                DOM.noResult.classList.add('hidden');
                DOM.matchTip.classList.add('hidden');
                DOM.clearBtn.classList.add('hidden');
                STATE.lastQuery = '';
                return;
            }

            if (query === STATE.lastQuery) { showError('已搜索过此关键词，无需重复搜索'); return; }

            try {
                STATE.isSearching = true;
                STATE.lastQuery = query;
                DOM.searchBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i><span>搜索中</span>';
                DOM.searchBtn.classList.add('searching');
                DOM.clearBtn.classList.remove('hidden');

                DOM.resultsList.innerHTML = '';
                DOM.resultsContainer.classList.add('hidden');
                DOM.noResult.classList.add('hidden');

                const results = [];
                searchData(STATE.data, query, results, [], 0, null);

                setTimeout(() => {
                    showResults(results, query);
                    STATE.isSearching = false;
                    DOM.searchBtn.innerHTML = '<i class="fa fa-search"></i><span>搜索</span>';
                    DOM.searchBtn.classList.remove('searching');
                }, 150);

            } catch (err) {
                console.error('搜索执行错误:', err);
                showError(`搜索失败：${err.message}`, 6000);
                STATE.isSearching = false;
                DOM.searchBtn.innerHTML = '<i class="fa fa-search"></i><span>搜索</span>';
                DOM.searchBtn.classList.remove('searching');
            }
        }

        function initEventListeners() {
            DOM.searchBtn.addEventListener('click', () => {
                executeSearch(DOM.searchInput.value);
                DOM.searchInput.blur();
            });

            DOM.clearBtn.addEventListener('click', () => {
                DOM.searchInput.value = '';
                DOM.clearBtn.classList.add('hidden');
                executeSearch('');
            });

            DOM.searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    executeSearch(DOM.searchInput.value);
                    DOM.searchInput.blur();
                }
            });

            DOM.searchInput.addEventListener('input', () => {
                DOM.clearBtn.classList.toggle('hidden', !DOM.searchInput.value.trim());
            });

            DOM.searchInput.addEventListener('focus', () => {
                DOM.errorMessage.classList.add('hidden');
            });
        }

        function init() {
            DOM.searchBtn.disabled = true;
            DOM.searchBtn.classList.add('searching');
            DOM.clearBtn.classList.add('hidden');
            initEventListeners();
            loadData();
        }

        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
